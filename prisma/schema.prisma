generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String              @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  enabled            Boolean             @default(true)
  marketingEmails    Boolean             @default(true)
  productEmails      Boolean             @default(true)
  role               UserRole            @default(USER)
  accounts           Account[]
  activities         Activity[]
  analytics          Analytics[]
  communityComments  CommunityComment[]
  communityPosts     CommunityPost[]
  communityLikes     CommunityPostLike[]
  funnels            Funnel[]
  myTemplates        MyTemplate[]
  notifications      Notification[]
  payments           Payment[]
  payouts            Payout[]
  purchasedTemplates PurchasedTemplate[]
  sellerEarnings     SellerEarning[]
  sessions           Session[]
  sites              Site[]
  siteSales          SiteSale[]
  subscriptions      Subscription[]
  transactions       Transaction[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Site {
  id                String       @id @default(cuid())
  name              String
  description       String?
  subdomain         String       @unique
  customDomain      String?      @unique
  template          TemplateType
  logo              String?
  favicon           String?
  userId            String
  googleAnalyticsId String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  analytics         Analytics[]
  bookings          Booking[]
  pages             Page[]
  payments          Payment[]
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  siteSales         SiteSale?
  submissions       Submission[]
}

model Page {
  id          String   @id @default(cuid())
  title       String
  slug        String
  content     Json
  isPublished Boolean  @default(false)
  siteId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  customCode  String?
  cssCode     String?
  htmlCode    String?
  jsCode      String?
  renderMode  String   @default("html")
  reactCode   Json?
  reactBundle String?
  site        Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([siteId, slug])
  @@index([siteId])
}

model Booking {
  id          String      @id @default(cuid())
  name        String
  email       String
  phone       String
  date        DateTime
  time        String
  guests      Int
  message     String?
  status      String      @default("pending")
  siteId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  type        BookingType @default(table)
  meetLink    String?
  callNumber  String?
  tableNumber String?
  site        Site        @relation(fields: [siteId], references: [id], onDelete: Cascade)
}

model Analytics {
  id        String   @id @default(cuid())
  pageUrl   String
  visitorId String?
  browser   String?
  os        String?
  device    String?
  country   String?
  city      String?
  referrer  String?
  duration  Int?
  siteId    String
  userId    String?
  createdAt DateTime @default(now())
  site      Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id])
}

model Payment {
  id             String        @id @default(cuid())
  amount         Float
  currency       String        @default("INR")
  status         String
  paymentId      String?
  orderId        String?
  receipt        String?
  userId         String
  planId         String?
  siteId         String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  subscriptionId String?
  templateId     String?
  plan           Plan?         @relation("PlanPayments", fields: [planId], references: [id])
  site           Site?         @relation(fields: [siteId], references: [id], onDelete: Cascade)
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Plan {
  id                 String         @id @default(cuid())
  name               String
  description        String?
  price              Float
  currency           String         @default("INR")
  interval           String
  numberOfWebsites   Int?
  unlimitedWebsites  Boolean        @default(false)
  supportLevel       String?
  customDomain       Boolean        @default(false)
  advancedAnalytics  Boolean        @default(false)
  customIntegrations Boolean        @default(false)
  teamManagement     Boolean        @default(false)
  communityAccess    Boolean        @default(false)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  payments           Payment[]      @relation("PlanPayments")
  subscriptions      Subscription[] @relation("PlanSubscriptions")
}

model Submission {
  id        String   @id @default(cuid())
  siteId    String
  formType  String
  data      Json
  createdAt DateTime @default(now())
  site      Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                     String    @id @default(cuid())
  userId                 String
  planId                 String
  status                 String
  startDate              DateTime
  endDate                DateTime
  renewalDate            DateTime?
  razorpaySubscriptionId String?
  cancelAtPeriodEnd      Boolean   @default(false)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  payments               Payment[]
  plan                   Plan      @relation("PlanSubscriptions", fields: [planId], references: [id])
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Activity {
  id          String   @id @default(cuid())
  type        String
  userId      String
  targetId    String?
  description String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FrontendContent {
  id        String   @id @default(cuid())
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Revenue {
  id        String   @id @default(cuid())
  total     Float    @default(0)
  updatedAt DateTime @updatedAt
}

model CommissionSetting {
  id        String   @id @default(cuid())
  rate      Float    @default(0.07)
  updatedAt DateTime @updatedAt
}

model Template {
  id             String              @id @default(cuid())
  name           String
  slug           String              @unique
  price          Float
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  approved       Boolean             @default(false)
  category       String?
  createdBy      String
  css            String?
  description    String?
  html           String?
  js             String?
  preview        String?
  pages          Json?
  funnels        Funnel[]
  myTemplates    MyTemplate[]
  purchases      PurchasedTemplate[]
  sellerEarnings SellerEarning[]
  siteSales      SiteSale[]
}

model PurchasedTemplate {
  id          String   @id @default(cuid())
  userId      String
  templateId  String
  purchasedAt DateTime @default(now())
  template    Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, templateId])
}

model MyTemplate {
  id         String   @id @default(cuid())
  userId     String
  templateId String
  name       String
  html       String?
  css        String?
  js         String?
  reactCode  Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  pages      Json?
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, templateId])
}

model SiteSale {
  id         String   @id @default(cuid())
  userId     String
  siteId     String   @unique
  templateId String
  price      Float
  status     String   @default("active")
  totalSales Int      @default(0)
  earnings   Float    @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  site       Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SellerEarning {
  id               String   @id @default(cuid())
  sellerId         String
  templateId       String
  paymentId        String
  grossAmount      Float
  commissionRate   Float
  commissionAmount Float
  netAmount        Float
  createdAt        DateTime @default(now())
  seller           User     @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  template         Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model Payout {
  id        String   @id @default(cuid())
  userId    String
  amount    Float
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Funnel {
  id          String        @id @default(cuid())
  userId      String
  templateId  String
  saleId      String?
  name        String
  slug        String        @unique
  landingHtml String?
  landingCss  String?
  landingJs   String?
  thankHtml   String?
  thankCss    String?
  thankJs     String?
  status      String        @default("active")
  totalVisits Int           @default(0)
  conversions Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  template    Template      @relation(fields: [templateId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  visits      FunnelVisit[]
}

model FunnelVisit {
  id        String   @id @default(cuid())
  funnelId  String
  event     String
  ip        String?
  ua        String?
  createdAt DateTime @default(now())
  funnel    Funnel   @relation(fields: [funnelId], references: [id], onDelete: Cascade)
}

model Transaction {
  id          String   @id @default(uuid())
  userId      String
  type        String
  amount      Float
  currency    String
  status      String
  reference   String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model CommunityPost {
  id          String              @id @default(cuid())
  title       String
  content     String
  authorId    String
  authorName  String
  authorEmail String
  category    String              @default("general")
  tags        String[]            @default([])
  likes       Int                 @default(0)
  views       Int                 @default(0)
  isPublished Boolean             @default(true)
  isPinned    Boolean             @default(false)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  videoLink   String?
  websiteLink String?
  comments    CommunityComment[]
  author      User                @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes_users CommunityPostLike[]
}

model CommunityComment {
  id        String             @id @default(cuid())
  content   String
  authorId  String
  postId    String
  parentId  String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  author    User               @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent    CommunityComment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   CommunityComment[] @relation("CommentReplies")
  post      CommunityPost      @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model CommunityPostLike {
  id        String        @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime      @default(now())
  post      CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

enum UserRole {
  USER
  SUPER_ADMIN
}

enum TemplateType {
  general
  restaurant
  pharma
}

enum BookingType {
  meet
  call
  table
}
