// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  enabled       Boolean   @default(true)

  // Email preferences
  marketingEmails Boolean @default(true)
  productEmails   Boolean @default(true)

  // Role for super admin
  role           UserRole @default(USER)

  // Relations
  accounts      Account[]
  sessions      Session[]
  sites         Site[]
  analytics     Analytics[]
  payments      Payment[]
  notifications Notification[]
  subscriptions Subscription[]
  activities    Activity[]
  purchasedTemplates PurchasedTemplate[]
  myTemplates   MyTemplate[]
  transactions  Transaction[]
  communityPosts CommunityPost[]
  communityComments CommunityComment[]
  communityLikes CommunityPostLike[]
}

// User role enum
enum UserRole {
  USER
  SUPER_ADMIN
}

// NextAuth models
model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// Template enum
enum TemplateType {
  general
  restaurant
  pharma
}

// Site model
model Site {
  id            String       @id @default(cuid())
  name          String
  description   String?
  subdomain     String       @unique
  customDomain  String?      @unique
  template      TemplateType
  logo          String?
  favicon       String?
  userId        String
  googleAnalyticsId String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relations
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  pages         Page[]
  bookings      Booking[]
  analytics     Analytics[]
  payments      Payment[]
  submissions   Submission[]
}

// Page model
model Page {
  id            String    @id @default(cuid())
  title         String
  slug          String
  content       Json
  isPublished   Boolean   @default(false)
  siteId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  customCode    String?   // User-written code for the page
  htmlCode      String?   // User HTML code
  cssCode       String?   // User CSS code
  jsCode        String?   // User JS code
  reactCode     Json?     // User React (JSX) code, now supports multi-file (object with filenames as keys)
  renderMode    String    @default("html") // 'html' or 'react'
  reactBundle   String?   // Bundled React JS for iframe rendering

  // Relations
  site          Site      @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([siteId, slug])
}

// Booking model (for restaurants)
enum BookingType {
  meet
  call
  table
}

model Booking {
  id            String    @id @default(cuid())
  name          String
  email         String
  phone         String
  date          DateTime
  time          String
  guests        Int
  message       String?
  status        String    @default("pending") // pending, confirmed, cancelled
  siteId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // New fields
  type          BookingType @default(table)
  meetLink      String?
  callNumber    String?
  tableNumber   String?

  // Relations
  site          Site      @relation(fields: [siteId], references: [id], onDelete: Cascade)
}

// Analytics model
model Analytics {
  id            String    @id @default(cuid())
  pageUrl       String
  visitorId     String?
  browser       String?
  os            String?
  device        String?
  country       String?
  city          String?
  referrer      String?
  duration      Int?      // in seconds
  siteId        String
  userId        String?
  createdAt     DateTime  @default(now())

  // Relations
  site          Site      @relation(fields: [siteId], references: [id], onDelete: Cascade)
  user          User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
}

// Payment model
model Payment {
  id            String    @id @default(cuid())
  amount        Float
  currency      String    @default("INR")
  status        String    // success, failed, pending
  paymentId     String?   // Razorpay payment ID
  orderId       String?   // Razorpay order ID
  receipt       String?
  userId        String
  planId        String?
  siteId        String?   // New: optional, to allow payments not linked to a site
  templateId    String?   // Optional: for template purchases
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  subscriptionId String?
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  plan          Plan?      @relation("PlanPayments", fields: [planId], references: [id])
  site          Site?     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Subscription Plan model
model Plan {
  id                  String   @id @default(cuid())
  name                String
  description         String?
  price               Float
  currency            String   @default("INR")
  interval            String   // monthly, yearly
  numberOfWebsites    Int?
  unlimitedWebsites   Boolean  @default(false)
  supportLevel        String?  // "Basic", "Priority", "Dedicated"
  customDomain        Boolean  @default(false)
  advancedAnalytics   Boolean  @default(false)
  customIntegrations  Boolean  @default(false)
  teamManagement      Boolean  @default(false)
  communityAccess     Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  payments            Payment[]        @relation("PlanPayments")
  subscriptions       Subscription[]  @relation("PlanSubscriptions")
}

model Submission {
  id        String   @id @default(cuid())
  siteId    String
  formType  String   // e.g. "contact", "inquiry", etc.
  data      Json     // All submitted fields
  createdAt DateTime @default(now())

  // Relations
  site      Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // e.g. "site", "template", "booking", "submission", "domain"
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id            String   @id @default(cuid())
  userId        String
  planId        String
  status        String   // active, cancelled, past_due, etc.
  startDate     DateTime
  endDate       DateTime
  renewalDate   DateTime?
  razorpaySubscriptionId String?
  cancelAtPeriodEnd     Boolean @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan          Plan     @relation("PlanSubscriptions", fields: [planId], references: [id])
  payments      Payment[]
}

model Activity {
  id          String   @id @default(cuid())
  type        String   // e.g. 'impersonate', 'user_update', 'site_delete', etc.
  userId      String   // The admin who performed the action
  targetId    String?  // The affected user/site/etc.
  description String
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FrontendContent {
  id        String   @id @default(cuid())
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Revenue {
  id        String   @id @default(cuid())
  total     Float    @default(0)
  updatedAt DateTime @updatedAt
}

model Template {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  price     Float
  html      String?  // HTML code for the template
  css       String?  // CSS code for the template
  js        String?  // JavaScript code for the template
  pages     Json?    // { home: {...}, about: {...}, contact: {...}, services: {...}, product: {...} }
  category  String?  // Category (e.g. business, restaurant, portfolio, etc.)
  description String?
  createdBy String   // 'super_admin' or userId
  approved  Boolean  @default(false) // Only approved templates are shown in marketplace
  preview   String?  // URL or base64 for preview image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relations
  purchases PurchasedTemplate[]
  myTemplates MyTemplate[] // Add this line for the relation
}

model PurchasedTemplate {
  id         String   @id @default(cuid())
  userId     String
  templateId String
  purchasedAt DateTime @default(now())
  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  template Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  @@unique([userId, templateId])
}

model MyTemplate {
  id          String   @id @default(cuid())
  userId      String
  templateId  String
  name        String
  html        String?
  css         String?
  js          String?
  reactCode   Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  template    Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([userId, templateId])
}

model Transaction {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  type        String   // e.g., 'payment', 'refund', 'payout'
  amount      Float
  currency    String
  status      String   // e.g., 'pending', 'completed', 'failed'
  reference   String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Community model for developer community posts
model CommunityPost {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  authorId    String
  authorName  String
  authorEmail String
  category    String   @default("general") // "general", "question", "showcase", "tutorial", "feedback"
  tags        String[] @default([])
  videoLink   String?  // For tutorial posts
  websiteLink String?  // For showcase posts
  likes       Int      @default(0)
  views       Int      @default(0)
  isPublished Boolean  @default(true)
  isPinned    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments    CommunityComment[]
  likes_users CommunityPostLike[]
}

// Community comments
model CommunityComment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  authorId  String
  postId    String
  parentId  String?  // For nested comments
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent    CommunityComment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   CommunityComment[] @relation("CommentReplies")
}

// Community post likes
model CommunityPostLike {
  id     String @id @default(cuid())
  userId String
  postId String
  createdAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}
